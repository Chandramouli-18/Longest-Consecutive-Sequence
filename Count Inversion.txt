class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        long temp[] = new long[(int)N];
        return mergeSort(arr,temp,0,N-1);
    }
    
    static long mergeSort(long arr[], long temp[], long left, long right){
        long mid, inv = 0;
        
        if(right>left){
            mid = (left+right)/2;
            inv = mergeSort(arr,temp,left,mid);
            inv += mergeSort(arr,temp,mid+1,right);
            inv += merge(arr,temp,left,mid+1,right);
        }
        return inv;
    }
    
    static long merge(long arr[], long temp[], long left, long mid, long right){
        
        long inv = 0; 
        long i = left;
        long j = mid;
        long k = left;
        
        while((i<=mid-1) && (j<=right)){
            
            if(arr[(int)i] <= arr[(int)j]) temp[(int)k++] = arr[(int)i++]; 
            
            
            else{
                temp[(int)k++] = arr[(int)j++];
                inv += (mid-i);
            }
            
        }
            while(i<=mid-1) temp[(int)k++] = arr[(int)i++]; 
            
            while(j<=right) temp[(int)k++] = arr[(int)j++]; 
            
            for(i=left; i<=right; i++) arr[(int)i] = temp[(int)i];

            
            return inv;
    }
}